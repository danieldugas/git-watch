#!/usr/bin/env python
""" git-watch
Author: Daniel Dugas
"""
from __future__ import print_function
import os
import sys
import argparse
import git
HOME = os.path.abspath(os.path.expandvars("$HOME"))
THIS_FILE = os.path.realpath(__file__)
REPOLIST_FILENAME = "git_repos_to_watch.txt"
REPOLIST_FILEPATH = os.path.join(HOME, REPOLIST_FILENAME)

## Arguments
parser = argparse.ArgumentParser(description='Keeps track of git repositories.')
parser.add_argument(
        '--quiet',
        dest='QUIET',
        action='store_true',
        help='Do not print standard output (warnings and errors will still print)',
)
parser.add_argument(
        '--no-fetch',
        dest='NO_FETCH',
        action='store_true',
        help='Do not git fetch the repositories',
)
parser.add_argument(
        '--add-this-repo',
        dest='ADD_THIS',
        action='store_true',
        help="Add the current repository to {}".format(REPOLIST_FILENAME),
)
parser.add_argument(
        '--bad-only',
        dest='BAD_ONLY',
        action='store_true',
        help='Do not output anything for repositories which are up to date',
)
parser.add_argument(
        '--fast-forward',
        dest='FAST_FORWARD',
        action='store_true',
        help="Execute 'git pull' command for all repositories which can be fast-forwarded",
)

ARGS = parser.parse_args()

## Definitions
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def warn(msg):
    print(''.join([bcolors.WARNING, "WARNING: ", msg, bcolors.ENDC]))
    return

def get_git_root(path):
    """ Returns the root of the git repository containing 'path'. """
    r_ = git.Repo(path, search_parent_directories=True)
    return r_.git.rev_parse("--show-toplevel")

def is_dir_else_warn(path):
    """ Same as os.path.isdir but issues a warning if False """
    isdir = os.path.isdir(path)
    if not isdir:
        warn("{} is not a directory.".format(path))
    return isdir

def expand_first_star(path):
    """ Expands the first star in a path. """
    new_paths = []
    # A path is understood as "parent_dir/prefix*suffix/subdir"
    l, r = path.split('*', 1)
    ls_ = l.rsplit('/', 1)
    rs_ = r.split('/', 1)
    parent = ls_[0]
    prefix = ls_[1] if len(ls_) == 2 else ''
    suffix = rs_[0]
    subdir = rs_[1] if len(rs_) == 2 else ''
    subdir = subdir.strip('/') # fix things like "parent//subdir"
    # list all subdirectories which could replace the star
    if not is_dir_else_warn(parent):
        return []
    candidates = [d for d in os.listdir(parent) if
            os.path.isdir(os.path.join(parent, d))] + ['']
    candidates = [c for c in candidates if
            c.startswith(prefix) and
            c.endswith(suffix) and
            len(c) >= ( len(suffix) + len(prefix) )
    ]
    new_paths = [os.path.join(parent, c, subdir) for c in candidates]
    # remove fully expanded paths that don't resolve to directories
    new_paths = [p for p in new_paths if '*' in p or os.path.isdir(p)]
    verified_paths = []
    for p in new_paths:
        if '*' in p:
            verified_paths.append(p)
            continue
        try:
            git.Repo(p)
            verified_paths.append(p)
            continue
        except:
            continue
    return verified_paths

def expand_stars(paths):
    """ Replace paths containing a '*' symbol with an entry for each subdirectory """
    expanded_paths = []
    paths_to_expand = list(paths) # copy
    while True:
        path = paths_to_expand.pop()
        # expand once
        if '*' in path:
            new_paths = expand_first_star(path)
            paths_to_expand = paths_to_expand + new_paths
        else:
            expanded_paths.append(path)
        if not paths_to_expand:
            break
    # filter duplicates
    expanded_paths = list(set(expanded_paths))
    return expanded_paths

## Create default repository list file in $HOME if it does not exist.
if not os.path.isfile(REPOLIST_FILEPATH):
    warn(
        "No {} file. creating default file in {}".format(REPOLIST_FILENAME, REPOLIST_FILEPATH)
    )
    with open(REPOLIST_FILEPATH, "w") as f_:
        f_.write("# Add the locations of your Github repos to watch:")
        this_git = get_git_root(THIS_FILE)
        f_.write("\n{} # Git repository for git_watch".format(this_git))

if __name__=="__main__":
    # Read list of repos to watch.
    with open(REPOLIST_FILEPATH, "r") as f_:
        lines = f_.readlines()
        # remove newlines and comments.
        lines = [l.split('#')[0] for l in lines] # remove everything after first '#'
        lines = [l.strip() for l in lines]
        lines = [l for l in lines if l != ''] # no empty lines
    # Expand users
    repo_paths = [os.path.expanduser(l) for l in lines]
    # Expand '*' in paths
    repo_paths = expand_stars(repo_paths)
    # Check that paths are directories
    repo_paths = [dir_ for dir_ in repo_paths if is_dir_else_warn(dir_)]
    # Filter duplicates
    repo_paths = list(set(repo_paths)) # filter duplicates

    ## Add the current repo to repository list file if specified in args.
    if ARGS.ADD_THIS:
        this_root = get_git_root(os.getcwd())
        if this_root  in [os.path.abspath(p) for p in repo_paths]:
            warn("{} is already in {}".format(this_root, REPOLIST_FILENAME))
        else:
            with open(REPOLIST_FILEPATH, "a") as f_:
                f_.write("\n{}".format(this_root))
            repo_paths.append(this_root)
            if not ARGS.QUIET:
                print("added {} to {}".format(this_root, REPOLIST_FILENAME))

    ## Fetch and print status for each repo
    for dir_ in repo_paths:
        r_ = git.Repo(dir_)
        if not ARGS.NO_FETCH:
            for remote in r_.remotes:
                remote.fetch()
        # Compare commits
        try:
            active_branch = r_.active_branch.name
            remote_branch = r_.active_branch.tracking_branch().name
        except:
            n_behind = 0
            n_ahead = 0
            active_branch = None
            remote_branch = None
        else:
            commits_behind = r_.iter_commits(active_branch + ".." + remote_branch)
            commits_ahead  = r_.iter_commits(remote_branch + ".." + active_branch)
            n_behind = sum(1 for c in commits_behind)
            n_ahead = sum(1 for c in commits_ahead)

        # Modified files
        modified = [ item.a_path for item in r_.index.diff(None) ]
        untracked = r_.untracked_files

        # Fast forward repo if desired
        if (
                ARGS.FAST_FORWARD
                and n_ahead == 0
                and n_behind > 0
                and not modified
                and not untracked
                and remote_branch is not None ):
            try:
                for remote in r_.remotes:
                    remote.pull(ff_only=True)
                n_behind = 0
            except:
                warn("{} failed to fast-forward.")
                continue

        # Print colored status message
        # Green: all ok
        # Yellow: ok but should fast-forward before modifs. else potential merge issues
        # Red: potential loss of work
        status_message = []
        if n_behind > 0:
            color = bcolors.WARNING
            status_message.append("{} commits behind upstream".format(n_behind))
        if remote_branch is None:
            color = bcolors.FAIL
            status_message.append("not tracking an upstream branch")
        if n_ahead > 0:
            color = bcolors.FAIL
            status_message.append("{} commits ahead upstream".format(n_ahead))
        has_modified_or_untracked = []
        if modified:
            has_modified_or_untracked.append("modified")
        if untracked:
            has_modified_or_untracked.append("untracked")
        if has_modified_or_untracked:
            color = bcolors.FAIL
            msg = "has {} files".format(" and ".join(has_modified_or_untracked))
            status_message.append(msg)
        if not status_message:
            color = bcolors.OKGREEN
            if not ARGS.BAD_ONLY:
                status_message = ["is up to date"]
        if not ARGS.QUIET:
            if status_message:
                print(''.join([color, str(dir_), " ", ' and '.join(status_message), bcolors.ENDC]))
